// Copyright 2015, wega Informtitik AG.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";
import "stdlib.proto";

option java_multiple_files = true;
option java_package = "sila2.com.wega-it.common.barcodeReader";
option java_outer_classname = "Matrix200Proto";
option objc_class_prefix = "MTX";

package sila2.org.sila_standard.release_candidate.common;

service canBarcodeReaderConfiguration {
   //sets all BarcodeReaderConfiguration Parameter
   rpc setConfiguration(BarcodeReaderConfiguration) returns (status) {}    
   //reads all BarocdeReaderConfiguration Parameter
   rpc getConfiguration(Empty) returns (BarcodeReaderConfiguration) {}    
}

service canSetConfiguration {
  //
  // sets one configuration parameter.
  rpc setConfigParameter(ConfigurationParameter) returns (status) {}    
}

service canReadConfiguration {
   rpc getConfigParamter (ConfigurationParameter) returns (ConfigurationParameter) {}
}

message status {
    string  value=1;
}

message Empty
{
}

message ConfigurationParameter {	
	string name = 1;
	string value  = 2;
}

message  BarcodeReaderConfiguration 
{
     string baudRate = 1;
	 string connetionType = 2;
	 string deviceAddress =3;
	 string portName = 4;
}
