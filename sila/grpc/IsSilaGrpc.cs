// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: is_sila.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Org.SilaStandard.V2.RealeaseCandidate.IsSila {
  /// <summary>
  ///  Feature "is_sila"
  ///  Version: 3
  ///  In this version the description of features is simplified
  /// </summary>
  public static class is_sila
  {
    static readonly string __ServiceName = "org.sila_standard.v2.realease_candidate.is_sila.is_sila";

    static readonly Marshaller<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Void> __Marshaller_Void = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Void.Parser.ParseFrom);
    static readonly Marshaller<global::Org.SilaStandard.V2.RealeaseCandidate.IsSila.DeviveIdentification> __Marshaller_DeviveIdentification = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Org.SilaStandard.V2.RealeaseCandidate.IsSila.DeviveIdentification.Parser.ParseFrom);
    static readonly Marshaller<global::Org.SilaStandard.V2.RealeaseCandidate.IsSila.SupportedFeatures> __Marshaller_SupportedFeatures = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Org.SilaStandard.V2.RealeaseCandidate.IsSila.SupportedFeatures.Parser.ParseFrom);

    static readonly Method<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Void, global::Org.SilaStandard.V2.RealeaseCandidate.IsSila.DeviveIdentification> __Method_device_identification = new Method<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Void, global::Org.SilaStandard.V2.RealeaseCandidate.IsSila.DeviveIdentification>(
        MethodType.Unary,
        __ServiceName,
        "device_identification",
        __Marshaller_Void,
        __Marshaller_DeviveIdentification);

    static readonly Method<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Void, global::Org.SilaStandard.V2.RealeaseCandidate.IsSila.SupportedFeatures> __Method_supported_features = new Method<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Void, global::Org.SilaStandard.V2.RealeaseCandidate.IsSila.SupportedFeatures>(
        MethodType.Unary,
        __ServiceName,
        "supported_features",
        __Marshaller_Void,
        __Marshaller_SupportedFeatures);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Org.SilaStandard.V2.RealeaseCandidate.IsSila.IsSilaReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of is_sila</summary>
    public abstract class is_silaBase
    {
      /// <summary>
      ///  Property: Device Identification
      ///  This Property holds all of the Information about the device
      ///  This is related to the GetDeviceIdentification in SiLA 1.3
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Org.SilaStandard.V2.RealeaseCandidate.IsSila.DeviveIdentification> device_identification(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Void request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Property: Supported Features
      ///  This Property holds infortmation on all supported features of the device
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Org.SilaStandard.V2.RealeaseCandidate.IsSila.SupportedFeatures> supported_features(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Void request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for is_sila</summary>
    public class is_silaClient : ClientBase<is_silaClient>
    {
      /// <summary>Creates a new client for is_sila</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public is_silaClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for is_sila that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public is_silaClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected is_silaClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected is_silaClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  Property: Device Identification
      ///  This Property holds all of the Information about the device
      ///  This is related to the GetDeviceIdentification in SiLA 1.3
      /// </summary>
      public virtual global::Org.SilaStandard.V2.RealeaseCandidate.IsSila.DeviveIdentification device_identification(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Void request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return device_identification(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Property: Device Identification
      ///  This Property holds all of the Information about the device
      ///  This is related to the GetDeviceIdentification in SiLA 1.3
      /// </summary>
      public virtual global::Org.SilaStandard.V2.RealeaseCandidate.IsSila.DeviveIdentification device_identification(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Void request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_device_identification, null, options, request);
      }
      /// <summary>
      ///  Property: Device Identification
      ///  This Property holds all of the Information about the device
      ///  This is related to the GetDeviceIdentification in SiLA 1.3
      /// </summary>
      public virtual AsyncUnaryCall<global::Org.SilaStandard.V2.RealeaseCandidate.IsSila.DeviveIdentification> device_identificationAsync(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Void request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return device_identificationAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Property: Device Identification
      ///  This Property holds all of the Information about the device
      ///  This is related to the GetDeviceIdentification in SiLA 1.3
      /// </summary>
      public virtual AsyncUnaryCall<global::Org.SilaStandard.V2.RealeaseCandidate.IsSila.DeviveIdentification> device_identificationAsync(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Void request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_device_identification, null, options, request);
      }
      /// <summary>
      ///  Property: Supported Features
      ///  This Property holds infortmation on all supported features of the device
      /// </summary>
      public virtual global::Org.SilaStandard.V2.RealeaseCandidate.IsSila.SupportedFeatures supported_features(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Void request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return supported_features(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Property: Supported Features
      ///  This Property holds infortmation on all supported features of the device
      /// </summary>
      public virtual global::Org.SilaStandard.V2.RealeaseCandidate.IsSila.SupportedFeatures supported_features(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Void request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_supported_features, null, options, request);
      }
      /// <summary>
      ///  Property: Supported Features
      ///  This Property holds infortmation on all supported features of the device
      /// </summary>
      public virtual AsyncUnaryCall<global::Org.SilaStandard.V2.RealeaseCandidate.IsSila.SupportedFeatures> supported_featuresAsync(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Void request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return supported_featuresAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Property: Supported Features
      ///  This Property holds infortmation on all supported features of the device
      /// </summary>
      public virtual AsyncUnaryCall<global::Org.SilaStandard.V2.RealeaseCandidate.IsSila.SupportedFeatures> supported_featuresAsync(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Void request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_supported_features, null, options, request);
      }
      protected override is_silaClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new is_silaClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(is_silaBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_device_identification, serviceImpl.device_identification)
          .AddMethod(__Method_supported_features, serviceImpl.supported_features).Build();
    }

  }
}
#endregion
