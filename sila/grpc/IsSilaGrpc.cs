// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: is_Sila.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Org.SilaStandard.V2.RealeaseCandidate.IsSila {
  /// <summary>
  ///  Feature "is_sila"
  ///  As taken from SiLA 1.3 for demonstration purposes
  /// </summary>
  public static class is_sila
  {
    static readonly string __ServiceName = "org.sila_standard.v2.realease_candidate.is_sila.is_sila";

    static readonly Marshaller<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty> __Marshaller_Empty = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty.Parser.ParseFrom);
    static readonly Marshaller<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String> __Marshaller_String = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String.Parser.ParseFrom);

    static readonly Method<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty, global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String> __Method_wsdl = new Method<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty, global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String>(
        MethodType.Unary,
        __ServiceName,
        "wsdl",
        __Marshaller_Empty,
        __Marshaller_String);

    static readonly Method<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty, global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String> __Method_sila_interface_version = new Method<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty, global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String>(
        MethodType.Unary,
        __ServiceName,
        "sila_interface_version",
        __Marshaller_Empty,
        __Marshaller_String);

    static readonly Method<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty, global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String> __Method_device_manufacturer = new Method<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty, global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String>(
        MethodType.Unary,
        __ServiceName,
        "device_manufacturer",
        __Marshaller_Empty,
        __Marshaller_String);

    static readonly Method<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty, global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String> __Method_service_name = new Method<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty, global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String>(
        MethodType.Unary,
        __ServiceName,
        "service_name",
        __Marshaller_Empty,
        __Marshaller_String);

    static readonly Method<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty, global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String> __Method_device_serial_number = new Method<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty, global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String>(
        MethodType.Unary,
        __ServiceName,
        "device_serial_number",
        __Marshaller_Empty,
        __Marshaller_String);

    static readonly Method<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty, global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String> __Method_device_firmware_version = new Method<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty, global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String>(
        MethodType.Unary,
        __ServiceName,
        "device_firmware_version",
        __Marshaller_Empty,
        __Marshaller_String);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Org.SilaStandard.V2.RealeaseCandidate.IsSila.IsSilaReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of is_sila</summary>
    public abstract class is_silaBase
    {
      /// <summary>
      ///  Property: WSDL
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String> wsdl(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Property: SiLA Interface Version
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String> sila_interface_version(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Property: Device Manufacturer
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String> device_manufacturer(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Property: Service name
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String> service_name(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Property: Device serial number
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String> device_serial_number(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Property: Device Firmware version
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String> device_firmware_version(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for is_sila</summary>
    public class is_silaClient : ClientBase<is_silaClient>
    {
      /// <summary>Creates a new client for is_sila</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public is_silaClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for is_sila that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public is_silaClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected is_silaClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected is_silaClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  Property: WSDL
      /// </summary>
      public virtual global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String wsdl(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return wsdl(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Property: WSDL
      /// </summary>
      public virtual global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String wsdl(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_wsdl, null, options, request);
      }
      /// <summary>
      ///  Property: WSDL
      /// </summary>
      public virtual AsyncUnaryCall<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String> wsdlAsync(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return wsdlAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Property: WSDL
      /// </summary>
      public virtual AsyncUnaryCall<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String> wsdlAsync(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_wsdl, null, options, request);
      }
      /// <summary>
      ///  Property: SiLA Interface Version
      /// </summary>
      public virtual global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String sila_interface_version(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return sila_interface_version(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Property: SiLA Interface Version
      /// </summary>
      public virtual global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String sila_interface_version(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_sila_interface_version, null, options, request);
      }
      /// <summary>
      ///  Property: SiLA Interface Version
      /// </summary>
      public virtual AsyncUnaryCall<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String> sila_interface_versionAsync(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return sila_interface_versionAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Property: SiLA Interface Version
      /// </summary>
      public virtual AsyncUnaryCall<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String> sila_interface_versionAsync(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_sila_interface_version, null, options, request);
      }
      /// <summary>
      ///  Property: Device Manufacturer
      /// </summary>
      public virtual global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String device_manufacturer(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return device_manufacturer(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Property: Device Manufacturer
      /// </summary>
      public virtual global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String device_manufacturer(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_device_manufacturer, null, options, request);
      }
      /// <summary>
      ///  Property: Device Manufacturer
      /// </summary>
      public virtual AsyncUnaryCall<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String> device_manufacturerAsync(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return device_manufacturerAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Property: Device Manufacturer
      /// </summary>
      public virtual AsyncUnaryCall<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String> device_manufacturerAsync(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_device_manufacturer, null, options, request);
      }
      /// <summary>
      ///  Property: Service name
      /// </summary>
      public virtual global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String service_name(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return service_name(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Property: Service name
      /// </summary>
      public virtual global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String service_name(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_service_name, null, options, request);
      }
      /// <summary>
      ///  Property: Service name
      /// </summary>
      public virtual AsyncUnaryCall<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String> service_nameAsync(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return service_nameAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Property: Service name
      /// </summary>
      public virtual AsyncUnaryCall<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String> service_nameAsync(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_service_name, null, options, request);
      }
      /// <summary>
      ///  Property: Device serial number
      /// </summary>
      public virtual global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String device_serial_number(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return device_serial_number(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Property: Device serial number
      /// </summary>
      public virtual global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String device_serial_number(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_device_serial_number, null, options, request);
      }
      /// <summary>
      ///  Property: Device serial number
      /// </summary>
      public virtual AsyncUnaryCall<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String> device_serial_numberAsync(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return device_serial_numberAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Property: Device serial number
      /// </summary>
      public virtual AsyncUnaryCall<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String> device_serial_numberAsync(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_device_serial_number, null, options, request);
      }
      /// <summary>
      ///  Property: Device Firmware version
      /// </summary>
      public virtual global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String device_firmware_version(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return device_firmware_version(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Property: Device Firmware version
      /// </summary>
      public virtual global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String device_firmware_version(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_device_firmware_version, null, options, request);
      }
      /// <summary>
      ///  Property: Device Firmware version
      /// </summary>
      public virtual AsyncUnaryCall<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String> device_firmware_versionAsync(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return device_firmware_versionAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Property: Device Firmware version
      /// </summary>
      public virtual AsyncUnaryCall<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.String> device_firmware_versionAsync(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_device_firmware_version, null, options, request);
      }
      protected override is_silaClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new is_silaClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(is_silaBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_wsdl, serviceImpl.wsdl)
          .AddMethod(__Method_sila_interface_version, serviceImpl.sila_interface_version)
          .AddMethod(__Method_device_manufacturer, serviceImpl.device_manufacturer)
          .AddMethod(__Method_service_name, serviceImpl.service_name)
          .AddMethod(__Method_device_serial_number, serviceImpl.device_serial_number)
          .AddMethod(__Method_device_firmware_version, serviceImpl.device_firmware_version).Build();
    }

  }
}
#endregion
