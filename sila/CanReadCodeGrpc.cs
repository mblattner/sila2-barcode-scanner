// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: can_read_code.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Org.SilaStandard.V2.RealeaseCandidate.CanReadCode {
  /// <summary>
  ///  A simple RPC.
  ///
  ///  returns a scan Barode .
  /// </summary>
  public static class can_ReadCode
  {
    static readonly string __ServiceName = "org.sila_standard.v2.realease_candidate.canReadCode.can_ReadCode";

    static readonly Marshaller<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty> __Marshaller_Empty = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty.Parser.ParseFrom);
    static readonly Marshaller<global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerResponse> __Marshaller_ScannerResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerRequest> __Marshaller_ScannerRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerRequest.Parser.ParseFrom);

    static readonly Method<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty, global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerResponse> __Method_read_CodeWithException = new Method<global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty, global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerResponse>(
        MethodType.Unary,
        __ServiceName,
        "read_CodeWithException",
        __Marshaller_Empty,
        __Marshaller_ScannerResponse);

    static readonly Method<global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerRequest, global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerResponse> __Method_read_Code = new Method<global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerRequest, global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerResponse>(
        MethodType.Unary,
        __ServiceName,
        "read_Code",
        __Marshaller_ScannerRequest,
        __Marshaller_ScannerResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.CanReadCodeReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of can_ReadCode</summary>
    public abstract class can_ReadCodeBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerResponse> read_CodeWithException(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerResponse> read_Code(global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for can_ReadCode</summary>
    public class can_ReadCodeClient : ClientBase<can_ReadCodeClient>
    {
      /// <summary>Creates a new client for can_ReadCode</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public can_ReadCodeClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for can_ReadCode that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public can_ReadCodeClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected can_ReadCodeClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected can_ReadCodeClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerResponse read_CodeWithException(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return read_CodeWithException(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerResponse read_CodeWithException(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_read_CodeWithException, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerResponse> read_CodeWithExceptionAsync(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return read_CodeWithExceptionAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerResponse> read_CodeWithExceptionAsync(global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.Empty request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_read_CodeWithException, null, options, request);
      }
      public virtual global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerResponse read_Code(global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return read_Code(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerResponse read_Code(global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_read_Code, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerResponse> read_CodeAsync(global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return read_CodeAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerResponse> read_CodeAsync(global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_read_Code, null, options, request);
      }
      protected override can_ReadCodeClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new can_ReadCodeClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(can_ReadCodeBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_read_CodeWithException, serviceImpl.read_CodeWithException)
          .AddMethod(__Method_read_Code, serviceImpl.read_Code).Build();
    }

  }
  /// <summary>
  ///
  ///  returns a scan Barode .
  /// </summary>
  public static class can_ReadCodeContinuously
  {
    static readonly string __ServiceName = "org.sila_standard.v2.realease_candidate.canReadCode.can_ReadCodeContinuously";

    static readonly Marshaller<global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerRequest> __Marshaller_ScannerRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerResponse> __Marshaller_ScannerResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerResponse.Parser.ParseFrom);

    static readonly Method<global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerRequest, global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerResponse> __Method_startReading = new Method<global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerRequest, global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerResponse>(
        MethodType.ServerStreaming,
        __ServiceName,
        "startReading",
        __Marshaller_ScannerRequest,
        __Marshaller_ScannerResponse);

    static readonly Method<global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerRequest, global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerResponse> __Method_stopReading = new Method<global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerRequest, global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerResponse>(
        MethodType.Unary,
        __ServiceName,
        "stopReading",
        __Marshaller_ScannerRequest,
        __Marshaller_ScannerResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.CanReadCodeReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of can_ReadCodeContinuously</summary>
    public abstract class can_ReadCodeContinuouslyBase
    {
      public virtual global::System.Threading.Tasks.Task startReading(global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerRequest request, IServerStreamWriter<global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerResponse> responseStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerResponse> stopReading(global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for can_ReadCodeContinuously</summary>
    public class can_ReadCodeContinuouslyClient : ClientBase<can_ReadCodeContinuouslyClient>
    {
      /// <summary>Creates a new client for can_ReadCodeContinuously</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public can_ReadCodeContinuouslyClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for can_ReadCodeContinuously that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public can_ReadCodeContinuouslyClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected can_ReadCodeContinuouslyClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected can_ReadCodeContinuouslyClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual AsyncServerStreamingCall<global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerResponse> startReading(global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return startReading(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncServerStreamingCall<global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerResponse> startReading(global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerRequest request, CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_startReading, null, options, request);
      }
      public virtual global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerResponse stopReading(global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return stopReading(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerResponse stopReading(global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_stopReading, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerResponse> stopReadingAsync(global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return stopReadingAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerResponse> stopReadingAsync(global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_stopReading, null, options, request);
      }
      protected override can_ReadCodeContinuouslyClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new can_ReadCodeContinuouslyClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(can_ReadCodeContinuouslyBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_startReading, serviceImpl.startReading)
          .AddMethod(__Method_stopReading, serviceImpl.stopReading).Build();
    }

  }
  public static class read_CodeContinuously
  {
    static readonly string __ServiceName = "org.sila_standard.v2.realease_candidate.canReadCode.read_CodeContinuously";

    static readonly Marshaller<global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerContinousRequest> __Marshaller_ScannerContinousRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerContinousRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerResponse> __Marshaller_ScannerResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerResponse.Parser.ParseFrom);

    static readonly Method<global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerContinousRequest, global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerResponse> __Method_openReader = new Method<global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerContinousRequest, global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerResponse>(
        MethodType.DuplexStreaming,
        __ServiceName,
        "openReader",
        __Marshaller_ScannerContinousRequest,
        __Marshaller_ScannerResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.CanReadCodeReflection.Descriptor.Services[2]; }
    }

    /// <summary>Base class for server-side implementations of read_CodeContinuously</summary>
    public abstract class read_CodeContinuouslyBase
    {
      public virtual global::System.Threading.Tasks.Task openReader(IAsyncStreamReader<global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerContinousRequest> requestStream, IServerStreamWriter<global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerResponse> responseStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for read_CodeContinuously</summary>
    public class read_CodeContinuouslyClient : ClientBase<read_CodeContinuouslyClient>
    {
      /// <summary>Creates a new client for read_CodeContinuously</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public read_CodeContinuouslyClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for read_CodeContinuously that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public read_CodeContinuouslyClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected read_CodeContinuouslyClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected read_CodeContinuouslyClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual AsyncDuplexStreamingCall<global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerContinousRequest, global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerResponse> openReader(Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return openReader(new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncDuplexStreamingCall<global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerContinousRequest, global::Org.SilaStandard.V2.RealeaseCandidate.CanReadCode.ScannerResponse> openReader(CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_openReader, null, options);
      }
      protected override read_CodeContinuouslyClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new read_CodeContinuouslyClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(read_CodeContinuouslyBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_openReader, serviceImpl.openReader).Build();
    }

  }
}
#endregion
