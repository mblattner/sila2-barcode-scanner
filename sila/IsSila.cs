// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: is_sila.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Org.SilaStandard.V2.RealeaseCandidate.IsSila {

  /// <summary>Holder for reflection information generated from is_sila.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class IsSilaReflection {

    #region Descriptor
    /// <summary>File descriptor for is_sila.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static IsSilaReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1pc19zaWxhLnByb3RvEi9vcmcuc2lsYV9zdGFuZGFyZC52Mi5yZWFsZWFz",
            "ZV9jYW5kaWRhdGUuaXNfc2lsYRoMc3RkbGliLnByb3RvIrUBChREZXZpdmVJ",
            "ZGVudGlmaWNhdGlvbhIMCgR3c2RsGAEgASgJEh4KFnNpbGFfaW50ZXJmYWNl",
            "X3ZlcnNpb24YAiABKAkSGwoTZGV2aWNlX21hbnVmYWN0dXJlchgDIAEoCRIT",
            "CgtkZXZpY2VfbmFtZRgEIAEoCRIcChRkZXZpY2Vfc2VyaWFsX251bWJlchgF",
            "IAEoCRIfChdkZXZpY2VfZmlybXdhcmVfdmVyc2lvbhgGIAEoCSJqChFTdXBw",
            "b3J0ZWRGZWF0dXJlcxJVCghmZWF0dXJlcxgBIAMoCzJDLm9yZy5zaWxhX3N0",
            "YW5kYXJkLnYyLnJlYWxlYXNlX2NhbmRpZGF0ZS5pc19zaWxhLkZlYXR1cmVE",
            "ZXNjcmlwdGlvbiJbChJGZWF0dXJlRGVzY3JpcHRpb24SFAoMZmVhdHVyZV9u",
            "YW1lGAEgASgJEhsKE2ZlYXR1cmVfZGVzY3JpcHRpb24YAiABKAkSEgoKcHJv",
            "dG9fZmlsZRgDIAEoCTK1AgoHaXNfc2lsYRKWAQoVZGV2aWNlX2lkZW50aWZp",
            "Y2F0aW9uEjQub3JnLnNpbGFfc3RhbmRhcmQudjIucmVhbGVhc2VfY2FuZGlk",
            "YXRlLnN0ZGxpYi5Wb2lkGkUub3JnLnNpbGFfc3RhbmRhcmQudjIucmVhbGVh",
            "c2VfY2FuZGlkYXRlLmlzX3NpbGEuRGV2aXZlSWRlbnRpZmljYXRpb24iABKQ",
            "AQoSc3VwcG9ydGVkX2ZlYXR1cmVzEjQub3JnLnNpbGFfc3RhbmRhcmQudjIu",
            "cmVhbGVhc2VfY2FuZGlkYXRlLnN0ZGxpYi5Wb2lkGkIub3JnLnNpbGFfc3Rh",
            "bmRhcmQudjIucmVhbGVhc2VfY2FuZGlkYXRlLmlzX3NpbGEuU3VwcG9ydGVk",
            "RmVhdHVyZXMiAGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Org.SilaStandard.V2.RealeaseCandidate.Stdlib.StdlibReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.SilaStandard.V2.RealeaseCandidate.IsSila.DeviveIdentification), global::Org.SilaStandard.V2.RealeaseCandidate.IsSila.DeviveIdentification.Parser, new[]{ "Wsdl", "SilaInterfaceVersion", "DeviceManufacturer", "DeviceName", "DeviceSerialNumber", "DeviceFirmwareVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.SilaStandard.V2.RealeaseCandidate.IsSila.SupportedFeatures), global::Org.SilaStandard.V2.RealeaseCandidate.IsSila.SupportedFeatures.Parser, new[]{ "Features" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.SilaStandard.V2.RealeaseCandidate.IsSila.FeatureDescription), global::Org.SilaStandard.V2.RealeaseCandidate.IsSila.FeatureDescription.Parser, new[]{ "FeatureName", "FeatureDescription_", "ProtoFile" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  Message to hold all device identification information
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DeviveIdentification : pb::IMessage<DeviveIdentification> {
    private static readonly pb::MessageParser<DeviveIdentification> _parser = new pb::MessageParser<DeviveIdentification>(() => new DeviveIdentification());
    public static pb::MessageParser<DeviveIdentification> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.SilaStandard.V2.RealeaseCandidate.IsSila.IsSilaReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public DeviveIdentification() {
      OnConstruction();
    }

    partial void OnConstruction();

    public DeviveIdentification(DeviveIdentification other) : this() {
      wsdl_ = other.wsdl_;
      silaInterfaceVersion_ = other.silaInterfaceVersion_;
      deviceManufacturer_ = other.deviceManufacturer_;
      deviceName_ = other.deviceName_;
      deviceSerialNumber_ = other.deviceSerialNumber_;
      deviceFirmwareVersion_ = other.deviceFirmwareVersion_;
    }

    public DeviveIdentification Clone() {
      return new DeviveIdentification(this);
    }

    /// <summary>Field number for the "wsdl" field.</summary>
    public const int WsdlFieldNumber = 1;
    private string wsdl_ = "";
    public string Wsdl {
      get { return wsdl_; }
      set {
        wsdl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sila_interface_version" field.</summary>
    public const int SilaInterfaceVersionFieldNumber = 2;
    private string silaInterfaceVersion_ = "";
    public string SilaInterfaceVersion {
      get { return silaInterfaceVersion_; }
      set {
        silaInterfaceVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device_manufacturer" field.</summary>
    public const int DeviceManufacturerFieldNumber = 3;
    private string deviceManufacturer_ = "";
    public string DeviceManufacturer {
      get { return deviceManufacturer_; }
      set {
        deviceManufacturer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device_name" field.</summary>
    public const int DeviceNameFieldNumber = 4;
    private string deviceName_ = "";
    public string DeviceName {
      get { return deviceName_; }
      set {
        deviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device_serial_number" field.</summary>
    public const int DeviceSerialNumberFieldNumber = 5;
    private string deviceSerialNumber_ = "";
    public string DeviceSerialNumber {
      get { return deviceSerialNumber_; }
      set {
        deviceSerialNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device_firmware_version" field.</summary>
    public const int DeviceFirmwareVersionFieldNumber = 6;
    private string deviceFirmwareVersion_ = "";
    public string DeviceFirmwareVersion {
      get { return deviceFirmwareVersion_; }
      set {
        deviceFirmwareVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as DeviveIdentification);
    }

    public bool Equals(DeviveIdentification other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Wsdl != other.Wsdl) return false;
      if (SilaInterfaceVersion != other.SilaInterfaceVersion) return false;
      if (DeviceManufacturer != other.DeviceManufacturer) return false;
      if (DeviceName != other.DeviceName) return false;
      if (DeviceSerialNumber != other.DeviceSerialNumber) return false;
      if (DeviceFirmwareVersion != other.DeviceFirmwareVersion) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Wsdl.Length != 0) hash ^= Wsdl.GetHashCode();
      if (SilaInterfaceVersion.Length != 0) hash ^= SilaInterfaceVersion.GetHashCode();
      if (DeviceManufacturer.Length != 0) hash ^= DeviceManufacturer.GetHashCode();
      if (DeviceName.Length != 0) hash ^= DeviceName.GetHashCode();
      if (DeviceSerialNumber.Length != 0) hash ^= DeviceSerialNumber.GetHashCode();
      if (DeviceFirmwareVersion.Length != 0) hash ^= DeviceFirmwareVersion.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Wsdl.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Wsdl);
      }
      if (SilaInterfaceVersion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SilaInterfaceVersion);
      }
      if (DeviceManufacturer.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DeviceManufacturer);
      }
      if (DeviceName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DeviceName);
      }
      if (DeviceSerialNumber.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DeviceSerialNumber);
      }
      if (DeviceFirmwareVersion.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DeviceFirmwareVersion);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Wsdl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Wsdl);
      }
      if (SilaInterfaceVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SilaInterfaceVersion);
      }
      if (DeviceManufacturer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceManufacturer);
      }
      if (DeviceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceName);
      }
      if (DeviceSerialNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceSerialNumber);
      }
      if (DeviceFirmwareVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceFirmwareVersion);
      }
      return size;
    }

    public void MergeFrom(DeviveIdentification other) {
      if (other == null) {
        return;
      }
      if (other.Wsdl.Length != 0) {
        Wsdl = other.Wsdl;
      }
      if (other.SilaInterfaceVersion.Length != 0) {
        SilaInterfaceVersion = other.SilaInterfaceVersion;
      }
      if (other.DeviceManufacturer.Length != 0) {
        DeviceManufacturer = other.DeviceManufacturer;
      }
      if (other.DeviceName.Length != 0) {
        DeviceName = other.DeviceName;
      }
      if (other.DeviceSerialNumber.Length != 0) {
        DeviceSerialNumber = other.DeviceSerialNumber;
      }
      if (other.DeviceFirmwareVersion.Length != 0) {
        DeviceFirmwareVersion = other.DeviceFirmwareVersion;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Wsdl = input.ReadString();
            break;
          }
          case 18: {
            SilaInterfaceVersion = input.ReadString();
            break;
          }
          case 26: {
            DeviceManufacturer = input.ReadString();
            break;
          }
          case 34: {
            DeviceName = input.ReadString();
            break;
          }
          case 42: {
            DeviceSerialNumber = input.ReadString();
            break;
          }
          case 50: {
            DeviceFirmwareVersion = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Message containing information on the supported Features
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SupportedFeatures : pb::IMessage<SupportedFeatures> {
    private static readonly pb::MessageParser<SupportedFeatures> _parser = new pb::MessageParser<SupportedFeatures>(() => new SupportedFeatures());
    public static pb::MessageParser<SupportedFeatures> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.SilaStandard.V2.RealeaseCandidate.IsSila.IsSilaReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SupportedFeatures() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SupportedFeatures(SupportedFeatures other) : this() {
      features_ = other.features_.Clone();
    }

    public SupportedFeatures Clone() {
      return new SupportedFeatures(this);
    }

    /// <summary>Field number for the "features" field.</summary>
    public const int FeaturesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Org.SilaStandard.V2.RealeaseCandidate.IsSila.FeatureDescription> _repeated_features_codec
        = pb::FieldCodec.ForMessage(10, global::Org.SilaStandard.V2.RealeaseCandidate.IsSila.FeatureDescription.Parser);
    private readonly pbc::RepeatedField<global::Org.SilaStandard.V2.RealeaseCandidate.IsSila.FeatureDescription> features_ = new pbc::RepeatedField<global::Org.SilaStandard.V2.RealeaseCandidate.IsSila.FeatureDescription>();
    /// <summary>
    ///  List of feature names
    /// </summary>
    public pbc::RepeatedField<global::Org.SilaStandard.V2.RealeaseCandidate.IsSila.FeatureDescription> Features {
      get { return features_; }
    }

    public override bool Equals(object other) {
      return Equals(other as SupportedFeatures);
    }

    public bool Equals(SupportedFeatures other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!features_.Equals(other.features_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= features_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      features_.WriteTo(output, _repeated_features_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += features_.CalculateSize(_repeated_features_codec);
      return size;
    }

    public void MergeFrom(SupportedFeatures other) {
      if (other == null) {
        return;
      }
      features_.Add(other.features_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            features_.AddEntriesFrom(input, _repeated_features_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Description of a feature
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FeatureDescription : pb::IMessage<FeatureDescription> {
    private static readonly pb::MessageParser<FeatureDescription> _parser = new pb::MessageParser<FeatureDescription>(() => new FeatureDescription());
    public static pb::MessageParser<FeatureDescription> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.SilaStandard.V2.RealeaseCandidate.IsSila.IsSilaReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public FeatureDescription() {
      OnConstruction();
    }

    partial void OnConstruction();

    public FeatureDescription(FeatureDescription other) : this() {
      featureName_ = other.featureName_;
      featureDescription_ = other.featureDescription_;
      protoFile_ = other.protoFile_;
    }

    public FeatureDescription Clone() {
      return new FeatureDescription(this);
    }

    /// <summary>Field number for the "feature_name" field.</summary>
    public const int FeatureNameFieldNumber = 1;
    private string featureName_ = "";
    /// <summary>
    ///  Name of the feature
    /// </summary>
    public string FeatureName {
      get { return featureName_; }
      set {
        featureName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "feature_description" field.</summary>
    public const int FeatureDescription_FieldNumber = 2;
    private string featureDescription_ = "";
    /// <summary>
    ///  Description of the feature
    ///  This contains all information that is specified
    ///  in the Specification
    ///  Potential Format: XML, JSON
    /// </summary>
    public string FeatureDescription_ {
      get { return featureDescription_; }
      set {
        featureDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "proto_file" field.</summary>
    public const int ProtoFileFieldNumber = 3;
    private string protoFile_ = "";
    /// <summary>
    ///  Proto File of the Feature as a string
    /// </summary>
    public string ProtoFile {
      get { return protoFile_; }
      set {
        protoFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as FeatureDescription);
    }

    public bool Equals(FeatureDescription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FeatureName != other.FeatureName) return false;
      if (FeatureDescription_ != other.FeatureDescription_) return false;
      if (ProtoFile != other.ProtoFile) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (FeatureName.Length != 0) hash ^= FeatureName.GetHashCode();
      if (FeatureDescription_.Length != 0) hash ^= FeatureDescription_.GetHashCode();
      if (ProtoFile.Length != 0) hash ^= ProtoFile.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (FeatureName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FeatureName);
      }
      if (FeatureDescription_.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FeatureDescription_);
      }
      if (ProtoFile.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ProtoFile);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (FeatureName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FeatureName);
      }
      if (FeatureDescription_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FeatureDescription_);
      }
      if (ProtoFile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProtoFile);
      }
      return size;
    }

    public void MergeFrom(FeatureDescription other) {
      if (other == null) {
        return;
      }
      if (other.FeatureName.Length != 0) {
        FeatureName = other.FeatureName;
      }
      if (other.FeatureDescription_.Length != 0) {
        FeatureDescription_ = other.FeatureDescription_;
      }
      if (other.ProtoFile.Length != 0) {
        ProtoFile = other.ProtoFile;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FeatureName = input.ReadString();
            break;
          }
          case 18: {
            FeatureDescription_ = input.ReadString();
            break;
          }
          case 26: {
            ProtoFile = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
